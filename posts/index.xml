<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on docEdub</title>
    
    
    
    <link>https://docEdub.com/posts/</link>
    <description>Recent content in Posts on docEdub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Oct 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://docEdub.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ProofOfConcept</title>
      <link>https://docEdub.com/posts/1/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://docEdub.com/posts/1/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;&lt;a href=&#34;https://docEdub.com/1/&#34;&gt;&amp;ldquo;ProofOfConcept&amp;rdquo;&lt;/a&gt; is my first virtual reality scene. I made it to prove out the tech stack I chose for making real-time music-driven VR experiences for web browsers.&lt;/p&gt;
&lt;p&gt;It works in the Oculus Quest 2 browser and most desktop browsers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docEdub.com/1/&#34;&gt;&lt;img src=&#34;https://docEdub.com/posts/1/preview.jpg&#34; alt=&#34;&amp;ldquo;ProofOfConcept&amp;rdquo; preview image&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;instructions&#34;&gt;Instructions&lt;/h2&gt;
&lt;p&gt;It takes a little time for the music get going so don&amp;rsquo;t turn up the volume too soon. Also note that the
closer you get to the objects the music is coming from, the louder the music will get.&lt;/p&gt;
&lt;p&gt;When the scene first loads you might see a button in the top left to unmute the sound. Click it to start the music.&lt;/p&gt;
&lt;p&gt;If a VR device is available you&amp;rsquo;ll see a button in the bottom right for entering VR mode.&lt;/p&gt;
&lt;p&gt;To look around on desktop and mobile devices, click and drag the mouse or drag your finger on the screen.&lt;/p&gt;
&lt;p&gt;On desktop devices, press the &lt;code&gt;WASD&lt;/code&gt; or arrow keys to move. Hold down the &lt;code&gt;Shift&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt; key to move faster, or use &lt;code&gt;Caps Lock&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On VR devices, use the thumbstick to teleport.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;technical-details&#34;&gt;Technical details&lt;/h2&gt;
&lt;h4 id=&#34;javascript&#34;&gt;Javascript&lt;/h4&gt;
&lt;p&gt;I used two Javascript libraries: &lt;a href=&#34;//csound.com&#34;&gt;Csound&lt;/a&gt; for audio and &lt;a href=&#34;//babylonjs.com&#34;&gt;Babylon.js&lt;/a&gt; for graphics.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;//csound.com&#34;&gt;Csound&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;//npmjs.com/package/@doc.e.dub/csound-browser/v/6.17.0-beta5&#34;&gt;6.17.0-beta5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.9 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;//babylonjs.com&#34;&gt;Babylon.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;//www.npmjs.com/package/babylonjs/v/4.2.0&#34;&gt;4.2.0&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;749 kB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;My custom Javascript compresses to 116 kB. Source code is &lt;a href=&#34;//github.com/docEdub/WorksInProgress/tree/Projects/1-ProofOfConcept&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;audio&#34;&gt;Audio&lt;/h4&gt;
&lt;p&gt;The audio is generated in realtime using the &lt;a href=&#34;//github.com/csound/csound/tree/feature/webaudio-csound/wasm&#34;&gt;WASM version of Csound&lt;/a&gt;. For the realtime graphics people out there, Csound is kind of like shaders for audio. In a browser
it runs on the CPU in a separate &lt;a href=&#34;//developer.mozilla.org/en-US/docs/Web/API/AudioWorklet&#34;&gt;AudioWorklet&lt;/a&gt; thread.&lt;/p&gt;
&lt;p&gt;For the positional audio I reimplemented &lt;a href=&#34;//github.com/GoogleChrome/omnitone&#34;&gt;Google&amp;rsquo;s Omnitone library&lt;/a&gt; in Csound. It works pretty well and allows me to use a lot more sound sources than I can with other methods.&lt;/p&gt;
&lt;p&gt;My composing workflow went like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sequence music in &lt;a href=&#34;//www.reaper.fm/&#34;&gt;Reaper&lt;/a&gt; DAW with plugins generated by &lt;a href=&#34;//cabbageaudio.com/&#34;&gt;Cabbage&lt;/a&gt; from my Csound scripts.&lt;/li&gt;
&lt;li&gt;Bounce DAW settings and plugins to a monolithic Csound file using the steps listed &lt;a href=&#34;//github.com/docEdub/WorksInProgress/tree/Projects/1-ProofOfConcept/Projects/1-ProofOfConcept#bounce-reaper-projects-to-monolith-csound-csd&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Copy/paste the monolithic Csound file and its corresponding JSON file into the Babylon.js project.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;graphics&#34;&gt;Graphics&lt;/h4&gt;
&lt;p&gt;The graphics are handled by &lt;a href=&#34;//github.com/BabylonJS/Babylon.js&#34;&gt;Babylon.js&lt;/a&gt;. The JSON file generated by the
bounced Csound script contains info needed for synchronizing the graphics to the audio. I tried sending messages directly from Csound to the graphics engine in realtime but they got bottlenecked so I embedded them into the project&amp;rsquo;s Javascript as JSON instead.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Meshes&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Draw calls&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Lights&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vertices&lt;/td&gt;
&lt;td&gt;26953&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Materials&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Textures&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
        
        </description>
    </item>
    
  </channel>
</rss>